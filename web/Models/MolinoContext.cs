// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace web.Models
{
    public partial class MolinoContext : DbContext
    {
        public MolinoContext()
        {
        }

        public MolinoContext(DbContextOptions<MolinoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Contrato> Contrato { get; set; }
        public virtual DbSet<Direccion> Direccion { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Grano> Grano { get; set; }
        public virtual DbSet<IndicadorCalidad> IndicadorCalidad { get; set; }
        public virtual DbSet<Localidad> Localidad { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<TipoGrano> TipoGrano { get; set; }
        public virtual DbSet<ValorIndicadorContrato> ValorIndicadorContrato { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseSqlServer("");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contrato>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CantidadCamiones).HasColumnName("cantidadCamiones");

                entity.Property(e => e.CantidadEnToneladas).HasColumnName("cantidadEnToneladas");

                entity.Property(e => e.Cumplido).HasColumnName("cumplido");

                entity.Property(e => e.EmpleadoId).HasColumnName("Empleado_ID");

                entity.Property(e => e.FechaEmision)
                    .HasColumnType("date")
                    .HasColumnName("fechaEmision");

                entity.Property(e => e.FechaLimite)
                    .HasColumnType("date")
                    .HasColumnName("fechaLimite");

                entity.Property(e => e.GranoId).HasColumnName("Grano_ID");

                entity.Property(e => e.MedidoEnToneladas).HasColumnName("medidoEnToneladas");

                entity.Property(e => e.MetodoDePago)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("metodoDePago");

                entity.Property(e => e.Numero).HasColumnName("numero");

                entity.Property(e => e.PrecioTonelada).HasColumnName("precioTonelada");

                entity.Property(e => e.ProveedorId).HasColumnName("Proveedor_ID");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.Contrato)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contrato_Empleado");

                entity.HasOne(d => d.Grano)
                    .WithMany(p => p.Contrato)
                    .HasForeignKey(d => d.GranoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contrato_Grano");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.Contrato)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contrato_Proveedor");
            });

            modelBuilder.Entity<Direccion>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Altura).HasColumnName("altura");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("calle");

                entity.Property(e => e.Departamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("departamento");

                entity.Property(e => e.LocalidadId).HasColumnName("Localidad_ID");

                entity.Property(e => e.Numero).HasColumnName("numero");

                entity.HasOne(d => d.Localidad)
                    .WithMany(p => p.Direccion)
                    .HasForeignKey(d => d.LocalidadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Direccion_Localidad");
            });

            modelBuilder.Entity<Empleado>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Apellido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("apellido");

                entity.Property(e => e.Cuil).HasColumnName("CUIL");

                entity.Property(e => e.Dni).HasColumnName("dni");

                entity.Property(e => e.Legajo).HasColumnName("legajo");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.Turno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("turno");
            });

            modelBuilder.Entity<Grano>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.TipoGranoId).HasColumnName("TipoGrano_ID");

                entity.HasOne(d => d.TipoGrano)
                    .WithMany(p => p.Grano)
                    .HasForeignKey(d => d.TipoGranoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Grano_TipoGrano");
            });

            modelBuilder.Entity<IndicadorCalidad>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Localidad>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CodigoPostal).HasColumnName("codigoPostal");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.ProvinciaId).HasColumnName("Provincia_ID");

                entity.HasOne(d => d.Provincia)
                    .WithMany(p => p.Localidad)
                    .HasForeignKey(d => d.ProvinciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Localidad_Provincia");
            });

            modelBuilder.Entity<Pais>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<Proveedor>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cuit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUIT");

                entity.Property(e => e.DireccionId).HasColumnName("Direccion_ID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.RazonSocial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("razonSocial");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.HasOne(d => d.Direccion)
                    .WithMany(p => p.Proveedor)
                    .HasForeignKey(d => d.DireccionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proveedor_Direccion");
            });

            modelBuilder.Entity<Provincia>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.PaisId).HasColumnName("Pais_ID");

                entity.HasOne(d => d.Pais)
                    .WithMany(p => p.Provincia)
                    .HasForeignKey(d => d.PaisId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Provincia_Pais");
            });

            modelBuilder.Entity<TipoGrano>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<ValorIndicadorContrato>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContratoId).HasColumnName("Contrato_ID");

                entity.Property(e => e.IndicadorCalidadId).HasColumnName("IndicadorCalidad_ID");

                entity.Property(e => e.Valor).HasColumnName("valor");

                entity.HasOne(d => d.Contrato)
                    .WithMany(p => p.ValorIndicadorContrato)
                    .HasForeignKey(d => d.ContratoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValorIndicadorContrato_Contrato");

                entity.HasOne(d => d.IndicadorCalidad)
                    .WithMany(p => p.ValorIndicadorContrato)
                    .HasForeignKey(d => d.IndicadorCalidadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValorIndicadorContrato_IndicadorCalidad");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}